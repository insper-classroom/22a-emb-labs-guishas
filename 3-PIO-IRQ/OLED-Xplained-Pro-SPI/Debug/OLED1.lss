
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e88  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  00401e88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002b4  2040044c  004022d4  0002044c  2**2
                  ALLOC
  3 .stack        00002000  20400700  00402588  0002044c  2**0
                  ALLOC
  4 .heap         00000200  20402700  00404588  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000144f8  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f23  00000000  00000000  000349cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004e97  00000000  00000000  000378ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000007a0  00000000  00000000  0003c785  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  0003cf25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000203a4  00000000  00000000  0003d715  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d412  00000000  00000000  0005dab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008f5c8  00000000  00000000  0006aecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001278  00000000  00000000  000fa494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 27 40 20 f5 0f 40 00 f1 0f 40 00 f1 0f 40 00     .'@ ..@...@...@.
  400010:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 0f 40 00 f1 0f 40 00 00 00 00 00 f1 0f 40 00     ..@...@.......@.
  40003c:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  40004c:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  40005c:	f1 0f 40 00 f1 0f 40 00 00 00 00 00 19 0e 40 00     ..@...@.......@.
  40006c:	2d 0e 40 00 41 0e 40 00 f1 0f 40 00 f1 0f 40 00     -.@.A.@...@...@.
  40007c:	f1 0f 40 00 55 0e 40 00 69 0e 40 00 f1 0f 40 00     ..@.U.@.i.@...@.
  40008c:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  40009c:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  4000ac:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  4000bc:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  4000cc:	f1 0f 40 00 00 00 00 00 f1 0f 40 00 00 00 00 00     ..@.......@.....
  4000dc:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  4000ec:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  4000fc:	f1 0f 40 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ..@...@...@...@.
  40010c:	f1 0f 40 00 f1 0f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f1 0f 40 00 f1 0f 40 00 f1 0f 40 00     ......@...@...@.
  40012c:	f1 0f 40 00 f1 0f 40 00 00 00 00 00 f1 0f 40 00     ..@...@.......@.
  40013c:	f1 0f 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00401e88 	.word	0x00401e88

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00401e88 	.word	0x00401e88
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00401e88 	.word	0x00401e88
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00400f9d 	.word	0x00400f9d

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr
	...

004002f8 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4002f8:	4b01      	ldr	r3, [pc, #4]	; (400300 <gfx_mono_set_framebuffer+0x8>)
  4002fa:	6018      	str	r0, [r3, #0]
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	20400468 	.word	0x20400468

00400304 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400304:	4b02      	ldr	r3, [pc, #8]	; (400310 <gfx_mono_framebuffer_put_byte+0xc>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40030c:	5442      	strb	r2, [r0, r1]
  40030e:	4770      	bx	lr
  400310:	20400468 	.word	0x20400468

00400314 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400314:	4b02      	ldr	r3, [pc, #8]	; (400320 <gfx_mono_framebuffer_get_byte+0xc>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40031c:	5c40      	ldrb	r0, [r0, r1]
  40031e:	4770      	bx	lr
  400320:	20400468 	.word	0x20400468

00400324 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400328:	1884      	adds	r4, r0, r2
  40032a:	2c80      	cmp	r4, #128	; 0x80
  40032c:	dd02      	ble.n	400334 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40032e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400332:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400334:	b322      	cbz	r2, 400380 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400336:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400338:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40033c:	2601      	movs	r6, #1
  40033e:	fa06 f101 	lsl.w	r1, r6, r1
  400342:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400344:	2b01      	cmp	r3, #1
  400346:	d01d      	beq.n	400384 <gfx_mono_generic_draw_horizontal_line+0x60>
  400348:	2b00      	cmp	r3, #0
  40034a:	d035      	beq.n	4003b8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40034c:	2b02      	cmp	r3, #2
  40034e:	d117      	bne.n	400380 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400350:	3801      	subs	r0, #1
  400352:	b2c7      	uxtb	r7, r0
  400354:	19d4      	adds	r4, r2, r7
  400356:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400358:	f8df a090 	ldr.w	sl, [pc, #144]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40035c:	f04f 0900 	mov.w	r9, #0
  400360:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400364:	4621      	mov	r1, r4
  400366:	4628      	mov	r0, r5
  400368:	47d0      	blx	sl
			temp ^= pixelmask;
  40036a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40036e:	464b      	mov	r3, r9
  400370:	b2d2      	uxtb	r2, r2
  400372:	4621      	mov	r1, r4
  400374:	4628      	mov	r0, r5
  400376:	47c0      	blx	r8
  400378:	3c01      	subs	r4, #1
  40037a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40037c:	42bc      	cmp	r4, r7
  40037e:	d1f1      	bne.n	400364 <gfx_mono_generic_draw_horizontal_line+0x40>
  400380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400384:	3801      	subs	r0, #1
  400386:	b2c7      	uxtb	r7, r0
  400388:	19d4      	adds	r4, r2, r7
  40038a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40038c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400390:	f04f 0900 	mov.w	r9, #0
  400394:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400398:	4621      	mov	r1, r4
  40039a:	4628      	mov	r0, r5
  40039c:	47d0      	blx	sl
			temp |= pixelmask;
  40039e:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003a2:	464b      	mov	r3, r9
  4003a4:	b2d2      	uxtb	r2, r2
  4003a6:	4621      	mov	r1, r4
  4003a8:	4628      	mov	r0, r5
  4003aa:	47c0      	blx	r8
  4003ac:	3c01      	subs	r4, #1
  4003ae:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003b0:	42bc      	cmp	r4, r7
  4003b2:	d1f1      	bne.n	400398 <gfx_mono_generic_draw_horizontal_line+0x74>
  4003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003b8:	3801      	subs	r0, #1
  4003ba:	b2c7      	uxtb	r7, r0
  4003bc:	19d4      	adds	r4, r2, r7
  4003be:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4003c0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4003c4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4003c6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4003ca:	4621      	mov	r1, r4
  4003cc:	4628      	mov	r0, r5
  4003ce:	47c0      	blx	r8
			temp &= ~pixelmask;
  4003d0:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003d4:	2300      	movs	r3, #0
  4003d6:	b2d2      	uxtb	r2, r2
  4003d8:	4621      	mov	r1, r4
  4003da:	4628      	mov	r0, r5
  4003dc:	47c8      	blx	r9
  4003de:	3c01      	subs	r4, #1
  4003e0:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003e2:	42bc      	cmp	r4, r7
  4003e4:	d1f1      	bne.n	4003ca <gfx_mono_generic_draw_horizontal_line+0xa6>
  4003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003ea:	bf00      	nop
  4003ec:	004007e1 	.word	0x004007e1
  4003f0:	004006dd 	.word	0x004006dd

004003f4 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4003f4:	2a00      	cmp	r2, #0
  4003f6:	d048      	beq.n	40048a <gfx_mono_generic_draw_vertical_line+0x96>
{
  4003f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4003fc:	4614      	mov	r4, r2
  4003fe:	461f      	mov	r7, r3
  400400:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  400402:	1e4a      	subs	r2, r1, #1
  400404:	4422      	add	r2, r4
  400406:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  400408:	4291      	cmp	r1, r2
  40040a:	d031      	beq.n	400470 <gfx_mono_generic_draw_vertical_line+0x7c>
  40040c:	2a1f      	cmp	r2, #31
  40040e:	bf28      	it	cs
  400410:	221f      	movcs	r2, #31
  400412:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400414:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  400416:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  40041a:	f001 0207 	and.w	r2, r1, #7
  40041e:	23ff      	movs	r3, #255	; 0xff
  400420:	fa03 f202 	lsl.w	r2, r3, r2
  400424:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  400426:	f005 0507 	and.w	r5, r5, #7
  40042a:	f1c5 0507 	rsb	r5, r5, #7
  40042e:	fa43 f505 	asr.w	r5, r3, r5
  400432:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400434:	4544      	cmp	r4, r8
  400436:	d020      	beq.n	40047a <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400438:	463b      	mov	r3, r7
  40043a:	4601      	mov	r1, r0
  40043c:	4620      	mov	r0, r4
  40043e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 40048c <gfx_mono_generic_draw_vertical_line+0x98>
  400442:	47c8      	blx	r9

		while (++y1page < y2page) {
  400444:	3401      	adds	r4, #1
  400446:	45a0      	cmp	r8, r4
  400448:	d90a      	bls.n	400460 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  40044a:	f04f 0aff 	mov.w	sl, #255	; 0xff
  40044e:	463b      	mov	r3, r7
  400450:	4652      	mov	r2, sl
  400452:	4631      	mov	r1, r6
  400454:	4620      	mov	r0, r4
  400456:	47c8      	blx	r9
		while (++y1page < y2page) {
  400458:	3401      	adds	r4, #1
  40045a:	b2e4      	uxtb	r4, r4
  40045c:	45a0      	cmp	r8, r4
  40045e:	d8f6      	bhi.n	40044e <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400460:	463b      	mov	r3, r7
  400462:	462a      	mov	r2, r5
  400464:	4631      	mov	r1, r6
  400466:	4640      	mov	r0, r8
  400468:	4c08      	ldr	r4, [pc, #32]	; (40048c <gfx_mono_generic_draw_vertical_line+0x98>)
  40046a:	47a0      	blx	r4
  40046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400470:	461a      	mov	r2, r3
  400472:	4b07      	ldr	r3, [pc, #28]	; (400490 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400474:	4798      	blx	r3
		return;
  400476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  40047a:	463b      	mov	r3, r7
  40047c:	402a      	ands	r2, r5
  40047e:	4601      	mov	r1, r0
  400480:	4620      	mov	r0, r4
  400482:	4c02      	ldr	r4, [pc, #8]	; (40048c <gfx_mono_generic_draw_vertical_line+0x98>)
  400484:	47a0      	blx	r4
  400486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40048a:	4770      	bx	lr
  40048c:	004007ed 	.word	0x004007ed
  400490:	0040077d 	.word	0x0040077d

00400494 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400498:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  40049c:	b18b      	cbz	r3, 4004c2 <gfx_mono_generic_draw_filled_rect+0x2e>
  40049e:	461c      	mov	r4, r3
  4004a0:	4690      	mov	r8, r2
  4004a2:	4606      	mov	r6, r0
  4004a4:	1e4d      	subs	r5, r1, #1
  4004a6:	b2ed      	uxtb	r5, r5
  4004a8:	442c      	add	r4, r5
  4004aa:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4004ac:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4004c8 <gfx_mono_generic_draw_filled_rect+0x34>
  4004b0:	463b      	mov	r3, r7
  4004b2:	4642      	mov	r2, r8
  4004b4:	4621      	mov	r1, r4
  4004b6:	4630      	mov	r0, r6
  4004b8:	47c8      	blx	r9
  4004ba:	3c01      	subs	r4, #1
  4004bc:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4004be:	42ac      	cmp	r4, r5
  4004c0:	d1f6      	bne.n	4004b0 <gfx_mono_generic_draw_filled_rect+0x1c>
  4004c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004c6:	bf00      	nop
  4004c8:	00400325 	.word	0x00400325

004004cc <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  4004cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004d0:	b085      	sub	sp, #20
  4004d2:	4681      	mov	r9, r0
  4004d4:	9100      	str	r1, [sp, #0]
  4004d6:	9301      	str	r3, [sp, #4]
  4004d8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  4004dc:	b17a      	cbz	r2, 4004fe <gfx_mono_generic_draw_filled_circle+0x32>
  4004de:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  4004e0:	0055      	lsls	r5, r2, #1
  4004e2:	f1c5 0503 	rsb	r5, r5, #3
  4004e6:	2701      	movs	r7, #1
  4004e8:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4004ec:	f00b 0303 	and.w	r3, fp, #3
  4004f0:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4004f2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 4005e4 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4004f6:	f00b 030c 	and.w	r3, fp, #12
  4004fa:	9303      	str	r3, [sp, #12]
  4004fc:	e04d      	b.n	40059a <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4004fe:	461a      	mov	r2, r3
  400500:	4b37      	ldr	r3, [pc, #220]	; (4005e0 <gfx_mono_generic_draw_filled_circle+0x114>)
  400502:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  400504:	b005      	add	sp, #20
  400506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  40050a:	9b00      	ldr	r3, [sp, #0]
  40050c:	1b19      	subs	r1, r3, r4
  40050e:	eb09 0006 	add.w	r0, r9, r6
  400512:	9b01      	ldr	r3, [sp, #4]
  400514:	463a      	mov	r2, r7
  400516:	b2c9      	uxtb	r1, r1
  400518:	b2c0      	uxtb	r0, r0
  40051a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  40051c:	1c72      	adds	r2, r6, #1
  40051e:	9900      	ldr	r1, [sp, #0]
  400520:	1b89      	subs	r1, r1, r6
  400522:	eb09 0004 	add.w	r0, r9, r4
  400526:	9b01      	ldr	r3, [sp, #4]
  400528:	b2d2      	uxtb	r2, r2
  40052a:	b2c9      	uxtb	r1, r1
  40052c:	b2c0      	uxtb	r0, r0
  40052e:	47d0      	blx	sl
  400530:	e038      	b.n	4005a4 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  400532:	9b00      	ldr	r3, [sp, #0]
  400534:	1b19      	subs	r1, r3, r4
  400536:	eba9 0006 	sub.w	r0, r9, r6
  40053a:	9b01      	ldr	r3, [sp, #4]
  40053c:	463a      	mov	r2, r7
  40053e:	b2c9      	uxtb	r1, r1
  400540:	b2c0      	uxtb	r0, r0
  400542:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400544:	1c72      	adds	r2, r6, #1
  400546:	9900      	ldr	r1, [sp, #0]
  400548:	1b89      	subs	r1, r1, r6
  40054a:	eba9 0004 	sub.w	r0, r9, r4
  40054e:	9b01      	ldr	r3, [sp, #4]
  400550:	b2d2      	uxtb	r2, r2
  400552:	b2c9      	uxtb	r1, r1
  400554:	b2c0      	uxtb	r0, r0
  400556:	47d0      	blx	sl
  400558:	e027      	b.n	4005aa <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  40055a:	eba9 0006 	sub.w	r0, r9, r6
  40055e:	9b01      	ldr	r3, [sp, #4]
  400560:	463a      	mov	r2, r7
  400562:	9900      	ldr	r1, [sp, #0]
  400564:	b2c0      	uxtb	r0, r0
  400566:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400568:	1c72      	adds	r2, r6, #1
  40056a:	eba9 0004 	sub.w	r0, r9, r4
  40056e:	9b01      	ldr	r3, [sp, #4]
  400570:	b2d2      	uxtb	r2, r2
  400572:	9900      	ldr	r1, [sp, #0]
  400574:	b2c0      	uxtb	r0, r0
  400576:	47d0      	blx	sl
  400578:	e01a      	b.n	4005b0 <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  40057a:	2d00      	cmp	r5, #0
  40057c:	db2b      	blt.n	4005d6 <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  40057e:	1ba4      	subs	r4, r4, r6
  400580:	350a      	adds	r5, #10
  400582:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400586:	b225      	sxth	r5, r4
			--offset_y;
  400588:	3e01      	subs	r6, #1
  40058a:	b2f6      	uxtb	r6, r6
  40058c:	f108 0801 	add.w	r8, r8, #1
  400590:	1c7b      	adds	r3, r7, #1
  400592:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400594:	42be      	cmp	r6, r7
  400596:	d3b5      	bcc.n	400504 <gfx_mono_generic_draw_filled_circle+0x38>
  400598:	461f      	mov	r7, r3
  40059a:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  40059e:	9b02      	ldr	r3, [sp, #8]
  4005a0:	2b00      	cmp	r3, #0
  4005a2:	d1b2      	bne.n	40050a <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  4005a4:	9b03      	ldr	r3, [sp, #12]
  4005a6:	2b00      	cmp	r3, #0
  4005a8:	d1c3      	bne.n	400532 <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  4005aa:	f01b 0f30 	tst.w	fp, #48	; 0x30
  4005ae:	d1d4      	bne.n	40055a <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  4005b0:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  4005b4:	d0e1      	beq.n	40057a <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  4005b6:	eb09 0006 	add.w	r0, r9, r6
  4005ba:	9b01      	ldr	r3, [sp, #4]
  4005bc:	463a      	mov	r2, r7
  4005be:	9900      	ldr	r1, [sp, #0]
  4005c0:	b2c0      	uxtb	r0, r0
  4005c2:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4005c4:	1c72      	adds	r2, r6, #1
  4005c6:	eb09 0004 	add.w	r0, r9, r4
  4005ca:	9b01      	ldr	r3, [sp, #4]
  4005cc:	b2d2      	uxtb	r2, r2
  4005ce:	9900      	ldr	r1, [sp, #0]
  4005d0:	b2c0      	uxtb	r0, r0
  4005d2:	47d0      	blx	sl
  4005d4:	e7d1      	b.n	40057a <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  4005d6:	3506      	adds	r5, #6
  4005d8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  4005dc:	b22d      	sxth	r5, r5
  4005de:	e7d5      	b.n	40058c <gfx_mono_generic_draw_filled_circle+0xc0>
  4005e0:	0040077d 	.word	0x0040077d
  4005e4:	004003f5 	.word	0x004003f5

004005e8 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ec:	b083      	sub	sp, #12
  4005ee:	4604      	mov	r4, r0
  4005f0:	4688      	mov	r8, r1
  4005f2:	4691      	mov	r9, r2
  4005f4:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4005f6:	7a5b      	ldrb	r3, [r3, #9]
  4005f8:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4005fc:	2100      	movs	r1, #0
  4005fe:	9100      	str	r1, [sp, #0]
  400600:	4649      	mov	r1, r9
  400602:	4640      	mov	r0, r8
  400604:	4d21      	ldr	r5, [pc, #132]	; (40068c <gfx_mono_draw_char+0xa4>)
  400606:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400608:	f89b 3000 	ldrb.w	r3, [fp]
  40060c:	b113      	cbz	r3, 400614 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40060e:	b003      	add	sp, #12
  400610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400614:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400618:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40061a:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40061e:	bf18      	it	ne
  400620:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400622:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400626:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40062a:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40062c:	fb17 f70a 	smulbb	r7, r7, sl
  400630:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400634:	f8db 3004 	ldr.w	r3, [fp, #4]
  400638:	fa13 f787 	uxtah	r7, r3, r7
  40063c:	e01f      	b.n	40067e <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40063e:	0064      	lsls	r4, r4, #1
  400640:	b2e4      	uxtb	r4, r4
  400642:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400644:	b2eb      	uxtb	r3, r5
  400646:	429e      	cmp	r6, r3
  400648:	d910      	bls.n	40066c <gfx_mono_draw_char+0x84>
  40064a:	b2eb      	uxtb	r3, r5
  40064c:	eb08 0003 	add.w	r0, r8, r3
  400650:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400652:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400656:	bf08      	it	eq
  400658:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40065c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400660:	d0ed      	beq.n	40063e <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400662:	2201      	movs	r2, #1
  400664:	4649      	mov	r1, r9
  400666:	4b0a      	ldr	r3, [pc, #40]	; (400690 <gfx_mono_draw_char+0xa8>)
  400668:	4798      	blx	r3
  40066a:	e7e8      	b.n	40063e <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40066c:	f109 0901 	add.w	r9, r9, #1
  400670:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400674:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400678:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  40067c:	d0c7      	beq.n	40060e <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40067e:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400682:	2e00      	cmp	r6, #0
  400684:	d0f2      	beq.n	40066c <gfx_mono_draw_char+0x84>
  400686:	2500      	movs	r5, #0
  400688:	462c      	mov	r4, r5
  40068a:	e7de      	b.n	40064a <gfx_mono_draw_char+0x62>
  40068c:	00400495 	.word	0x00400495
  400690:	0040077d 	.word	0x0040077d

00400694 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400698:	4604      	mov	r4, r0
  40069a:	4690      	mov	r8, r2
  40069c:	461d      	mov	r5, r3
  40069e:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4006a0:	4f0d      	ldr	r7, [pc, #52]	; (4006d8 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4006a2:	460e      	mov	r6, r1
  4006a4:	e008      	b.n	4006b8 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4006a6:	7a6a      	ldrb	r2, [r5, #9]
  4006a8:	3201      	adds	r2, #1
  4006aa:	4442      	add	r2, r8
  4006ac:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4006b0:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4006b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4006b6:	b16b      	cbz	r3, 4006d4 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4006b8:	7820      	ldrb	r0, [r4, #0]
  4006ba:	280a      	cmp	r0, #10
  4006bc:	d0f3      	beq.n	4006a6 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4006be:	280d      	cmp	r0, #13
  4006c0:	d0f7      	beq.n	4006b2 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4006c2:	462b      	mov	r3, r5
  4006c4:	4642      	mov	r2, r8
  4006c6:	4649      	mov	r1, r9
  4006c8:	47b8      	blx	r7
			x += font->width;
  4006ca:	7a2b      	ldrb	r3, [r5, #8]
  4006cc:	4499      	add	r9, r3
  4006ce:	fa5f f989 	uxtb.w	r9, r9
  4006d2:	e7ee      	b.n	4006b2 <gfx_mono_draw_string+0x1e>
}
  4006d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006d8:	004005e9 	.word	0x004005e9

004006dc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4006dc:	b570      	push	{r4, r5, r6, lr}
  4006de:	4604      	mov	r4, r0
  4006e0:	460d      	mov	r5, r1
  4006e2:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4006e4:	b91b      	cbnz	r3, 4006ee <gfx_mono_ssd1306_put_byte+0x12>
  4006e6:	4b0d      	ldr	r3, [pc, #52]	; (40071c <gfx_mono_ssd1306_put_byte+0x40>)
  4006e8:	4798      	blx	r3
  4006ea:	42b0      	cmp	r0, r6
  4006ec:	d015      	beq.n	40071a <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4006ee:	4632      	mov	r2, r6
  4006f0:	4629      	mov	r1, r5
  4006f2:	4620      	mov	r0, r4
  4006f4:	4b0a      	ldr	r3, [pc, #40]	; (400720 <gfx_mono_ssd1306_put_byte+0x44>)
  4006f6:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4006f8:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4006fc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400700:	4c08      	ldr	r4, [pc, #32]	; (400724 <gfx_mono_ssd1306_put_byte+0x48>)
  400702:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400704:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400708:	f040 0010 	orr.w	r0, r0, #16
  40070c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40070e:	f005 000f 	and.w	r0, r5, #15
  400712:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400714:	4630      	mov	r0, r6
  400716:	4b04      	ldr	r3, [pc, #16]	; (400728 <gfx_mono_ssd1306_put_byte+0x4c>)
  400718:	4798      	blx	r3
  40071a:	bd70      	pop	{r4, r5, r6, pc}
  40071c:	00400315 	.word	0x00400315
  400720:	00400305 	.word	0x00400305
  400724:	00400831 	.word	0x00400831
  400728:	00400a51 	.word	0x00400a51

0040072c <gfx_mono_ssd1306_init>:
{
  40072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400730:	480d      	ldr	r0, [pc, #52]	; (400768 <gfx_mono_ssd1306_init+0x3c>)
  400732:	4b0e      	ldr	r3, [pc, #56]	; (40076c <gfx_mono_ssd1306_init+0x40>)
  400734:	4798      	blx	r3
	ssd1306_init();
  400736:	4b0e      	ldr	r3, [pc, #56]	; (400770 <gfx_mono_ssd1306_init+0x44>)
  400738:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40073a:	2040      	movs	r0, #64	; 0x40
  40073c:	4b0d      	ldr	r3, [pc, #52]	; (400774 <gfx_mono_ssd1306_init+0x48>)
  40073e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400740:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400742:	f04f 0801 	mov.w	r8, #1
  400746:	462f      	mov	r7, r5
  400748:	4e0b      	ldr	r6, [pc, #44]	; (400778 <gfx_mono_ssd1306_init+0x4c>)
{
  40074a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40074c:	4643      	mov	r3, r8
  40074e:	463a      	mov	r2, r7
  400750:	b2e1      	uxtb	r1, r4
  400752:	4628      	mov	r0, r5
  400754:	47b0      	blx	r6
  400756:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400758:	2c80      	cmp	r4, #128	; 0x80
  40075a:	d1f7      	bne.n	40074c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40075c:	3501      	adds	r5, #1
  40075e:	b2ed      	uxtb	r5, r5
  400760:	2d04      	cmp	r5, #4
  400762:	d1f2      	bne.n	40074a <gfx_mono_ssd1306_init+0x1e>
  400764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400768:	2040046c 	.word	0x2040046c
  40076c:	004002f9 	.word	0x004002f9
  400770:	00400871 	.word	0x00400871
  400774:	00400831 	.word	0x00400831
  400778:	004006dd 	.word	0x004006dd

0040077c <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  40077c:	09c3      	lsrs	r3, r0, #7
  40077e:	d12a      	bne.n	4007d6 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400780:	291f      	cmp	r1, #31
  400782:	d828      	bhi.n	4007d6 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400788:	4614      	mov	r4, r2
  40078a:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  40078c:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40078e:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400792:	2201      	movs	r2, #1
  400794:	fa02 f701 	lsl.w	r7, r2, r1
  400798:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  40079c:	4601      	mov	r1, r0
  40079e:	4630      	mov	r0, r6
  4007a0:	4b0d      	ldr	r3, [pc, #52]	; (4007d8 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4007a2:	4798      	blx	r3
  4007a4:	4602      	mov	r2, r0
	switch (color) {
  4007a6:	2c01      	cmp	r4, #1
  4007a8:	d009      	beq.n	4007be <gfx_mono_ssd1306_draw_pixel+0x42>
  4007aa:	b164      	cbz	r4, 4007c6 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4007ac:	2c02      	cmp	r4, #2
  4007ae:	d00e      	beq.n	4007ce <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4007b0:	2300      	movs	r3, #0
  4007b2:	4629      	mov	r1, r5
  4007b4:	4630      	mov	r0, r6
  4007b6:	4c09      	ldr	r4, [pc, #36]	; (4007dc <gfx_mono_ssd1306_draw_pixel+0x60>)
  4007b8:	47a0      	blx	r4
  4007ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4007be:	ea48 0200 	orr.w	r2, r8, r0
  4007c2:	b2d2      	uxtb	r2, r2
		break;
  4007c4:	e7f4      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4007c6:	ea20 0207 	bic.w	r2, r0, r7
  4007ca:	b2d2      	uxtb	r2, r2
		break;
  4007cc:	e7f0      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4007ce:	ea88 0200 	eor.w	r2, r8, r0
  4007d2:	b2d2      	uxtb	r2, r2
		break;
  4007d4:	e7ec      	b.n	4007b0 <gfx_mono_ssd1306_draw_pixel+0x34>
  4007d6:	4770      	bx	lr
  4007d8:	00400315 	.word	0x00400315
  4007dc:	004006dd 	.word	0x004006dd

004007e0 <gfx_mono_ssd1306_get_byte>:
{
  4007e0:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4007e2:	4b01      	ldr	r3, [pc, #4]	; (4007e8 <gfx_mono_ssd1306_get_byte+0x8>)
  4007e4:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4007e6:	bd08      	pop	{r3, pc}
  4007e8:	00400315 	.word	0x00400315

004007ec <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  4007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007ee:	4605      	mov	r5, r0
  4007f0:	460e      	mov	r6, r1
  4007f2:	4617      	mov	r7, r2
  4007f4:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  4007f6:	4b0c      	ldr	r3, [pc, #48]	; (400828 <gfx_mono_ssd1306_mask_byte+0x3c>)
  4007f8:	4798      	blx	r3
  4007fa:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  4007fc:	2c01      	cmp	r4, #1
  4007fe:	d008      	beq.n	400812 <gfx_mono_ssd1306_mask_byte+0x26>
  400800:	b154      	cbz	r4, 400818 <gfx_mono_ssd1306_mask_byte+0x2c>
  400802:	2c02      	cmp	r4, #2
  400804:	d00c      	beq.n	400820 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400806:	2300      	movs	r3, #0
  400808:	4631      	mov	r1, r6
  40080a:	4628      	mov	r0, r5
  40080c:	4c07      	ldr	r4, [pc, #28]	; (40082c <gfx_mono_ssd1306_mask_byte+0x40>)
  40080e:	47a0      	blx	r4
  400810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400812:	433a      	orrs	r2, r7
  400814:	b2d2      	uxtb	r2, r2
		break;
  400816:	e7f6      	b.n	400806 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400818:	ea20 0207 	bic.w	r2, r0, r7
  40081c:	b2d2      	uxtb	r2, r2
		break;
  40081e:	e7f2      	b.n	400806 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400820:	407a      	eors	r2, r7
  400822:	b2d2      	uxtb	r2, r2
		break;
  400824:	e7ef      	b.n	400806 <gfx_mono_ssd1306_mask_byte+0x1a>
  400826:	bf00      	nop
  400828:	00400315 	.word	0x00400315
  40082c:	004006dd 	.word	0x004006dd

00400830 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400830:	b538      	push	{r3, r4, r5, lr}
  400832:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400834:	2208      	movs	r2, #8
  400836:	4b09      	ldr	r3, [pc, #36]	; (40085c <ssd1306_write_command+0x2c>)
  400838:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40083a:	4c09      	ldr	r4, [pc, #36]	; (400860 <ssd1306_write_command+0x30>)
  40083c:	2101      	movs	r1, #1
  40083e:	4620      	mov	r0, r4
  400840:	4b08      	ldr	r3, [pc, #32]	; (400864 <ssd1306_write_command+0x34>)
  400842:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400844:	2301      	movs	r3, #1
  400846:	461a      	mov	r2, r3
  400848:	4629      	mov	r1, r5
  40084a:	4620      	mov	r0, r4
  40084c:	4c06      	ldr	r4, [pc, #24]	; (400868 <ssd1306_write_command+0x38>)
  40084e:	47a0      	blx	r4
	delay_us(10);
  400850:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400854:	4b05      	ldr	r3, [pc, #20]	; (40086c <ssd1306_write_command+0x3c>)
  400856:	4798      	blx	r3
  400858:	bd38      	pop	{r3, r4, r5, pc}
  40085a:	bf00      	nop
  40085c:	400e1000 	.word	0x400e1000
  400860:	40008000 	.word	0x40008000
  400864:	004001d9 	.word	0x004001d9
  400868:	004001ef 	.word	0x004001ef
  40086c:	20400001 	.word	0x20400001

00400870 <ssd1306_init>:
{
  400870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400874:	4d66      	ldr	r5, [pc, #408]	; (400a10 <ssd1306_init+0x1a0>)
  400876:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40087a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40087c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400880:	4b64      	ldr	r3, [pc, #400]	; (400a14 <ssd1306_init+0x1a4>)
  400882:	2708      	movs	r7, #8
  400884:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400886:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40088a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40088c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400890:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400892:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400894:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400898:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40089a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40089e:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008a0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4008a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4008a6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4008a8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008aa:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008ae:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4008b0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4008b2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008b8:	f022 0208 	bic.w	r2, r2, #8
  4008bc:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008c0:	f022 0208 	bic.w	r2, r2, #8
  4008c4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4008c6:	601f      	str	r7, [r3, #0]
  4008c8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008ca:	631f      	str	r7, [r3, #48]	; 0x30
  4008cc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008ce:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400a4c <ssd1306_init+0x1dc>
  4008d2:	2300      	movs	r3, #0
  4008d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4008d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008dc:	4640      	mov	r0, r8
  4008de:	4c4e      	ldr	r4, [pc, #312]	; (400a18 <ssd1306_init+0x1a8>)
  4008e0:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4008e2:	2300      	movs	r3, #0
  4008e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4008e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008ec:	4640      	mov	r0, r8
  4008ee:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4008f0:	2300      	movs	r3, #0
  4008f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4008f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008fa:	4640      	mov	r0, r8
  4008fc:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4008fe:	2300      	movs	r3, #0
  400900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400904:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400908:	4640      	mov	r0, r8
  40090a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40090c:	2300      	movs	r3, #0
  40090e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400916:	4640      	mov	r0, r8
  400918:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40091a:	2300      	movs	r3, #0
  40091c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400920:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400924:	4640      	mov	r0, r8
  400926:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400928:	4c3c      	ldr	r4, [pc, #240]	; (400a1c <ssd1306_init+0x1ac>)
  40092a:	f04f 0902 	mov.w	r9, #2
  40092e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400932:	f04f 0880 	mov.w	r8, #128	; 0x80
  400936:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40093a:	6863      	ldr	r3, [r4, #4]
  40093c:	f043 0301 	orr.w	r3, r3, #1
  400940:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400942:	463a      	mov	r2, r7
  400944:	2101      	movs	r1, #1
  400946:	4620      	mov	r0, r4
  400948:	4b35      	ldr	r3, [pc, #212]	; (400a20 <ssd1306_init+0x1b0>)
  40094a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40094c:	2200      	movs	r2, #0
  40094e:	2101      	movs	r1, #1
  400950:	4620      	mov	r0, r4
  400952:	4b34      	ldr	r3, [pc, #208]	; (400a24 <ssd1306_init+0x1b4>)
  400954:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400956:	2200      	movs	r2, #0
  400958:	2101      	movs	r1, #1
  40095a:	4620      	mov	r0, r4
  40095c:	4b32      	ldr	r3, [pc, #200]	; (400a28 <ssd1306_init+0x1b8>)
  40095e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400960:	6863      	ldr	r3, [r4, #4]
  400962:	f023 0302 	bic.w	r3, r3, #2
  400966:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400968:	2200      	movs	r2, #0
  40096a:	2101      	movs	r1, #1
  40096c:	4620      	mov	r0, r4
  40096e:	4b2f      	ldr	r3, [pc, #188]	; (400a2c <ssd1306_init+0x1bc>)
  400970:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400972:	6863      	ldr	r3, [r4, #4]
  400974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400978:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40097a:	6863      	ldr	r3, [r4, #4]
  40097c:	f043 0310 	orr.w	r3, r3, #16
  400980:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400982:	492b      	ldr	r1, [pc, #172]	; (400a30 <ssd1306_init+0x1c0>)
  400984:	482b      	ldr	r0, [pc, #172]	; (400a34 <ssd1306_init+0x1c4>)
  400986:	4b2c      	ldr	r3, [pc, #176]	; (400a38 <ssd1306_init+0x1c8>)
  400988:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40098a:	b2c2      	uxtb	r2, r0
  40098c:	2101      	movs	r1, #1
  40098e:	4620      	mov	r0, r4
  400990:	4b2a      	ldr	r3, [pc, #168]	; (400a3c <ssd1306_init+0x1cc>)
  400992:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400994:	4620      	mov	r0, r4
  400996:	4b2a      	ldr	r3, [pc, #168]	; (400a40 <ssd1306_init+0x1d0>)
  400998:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40099a:	2301      	movs	r3, #1
  40099c:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40099e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4009a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4009a4:	4c27      	ldr	r4, [pc, #156]	; (400a44 <ssd1306_init+0x1d4>)
  4009a6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009a8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4009aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4009ae:	47a0      	blx	r4
  4009b0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4009b2:	20a8      	movs	r0, #168	; 0xa8
  4009b4:	4c24      	ldr	r4, [pc, #144]	; (400a48 <ssd1306_init+0x1d8>)
  4009b6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4009b8:	201f      	movs	r0, #31
  4009ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4009bc:	20d3      	movs	r0, #211	; 0xd3
  4009be:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4009c0:	2000      	movs	r0, #0
  4009c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4009c4:	2040      	movs	r0, #64	; 0x40
  4009c6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4009c8:	20a1      	movs	r0, #161	; 0xa1
  4009ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4009cc:	20c8      	movs	r0, #200	; 0xc8
  4009ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4009d0:	20da      	movs	r0, #218	; 0xda
  4009d2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4009d4:	4648      	mov	r0, r9
  4009d6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4009d8:	2081      	movs	r0, #129	; 0x81
  4009da:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4009dc:	208f      	movs	r0, #143	; 0x8f
  4009de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4009e0:	20a4      	movs	r0, #164	; 0xa4
  4009e2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4009e4:	20a6      	movs	r0, #166	; 0xa6
  4009e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4009e8:	20d5      	movs	r0, #213	; 0xd5
  4009ea:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4009ec:	4640      	mov	r0, r8
  4009ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4009f0:	208d      	movs	r0, #141	; 0x8d
  4009f2:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4009f4:	2014      	movs	r0, #20
  4009f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4009f8:	20db      	movs	r0, #219	; 0xdb
  4009fa:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4009fc:	2040      	movs	r0, #64	; 0x40
  4009fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400a00:	20d9      	movs	r0, #217	; 0xd9
  400a02:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400a04:	20f1      	movs	r0, #241	; 0xf1
  400a06:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400a08:	20af      	movs	r0, #175	; 0xaf
  400a0a:	47a0      	blx	r4
  400a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a10:	400e1200 	.word	0x400e1200
  400a14:	400e1000 	.word	0x400e1000
  400a18:	00400d31 	.word	0x00400d31
  400a1c:	40008000 	.word	0x40008000
  400a20:	0040025f 	.word	0x0040025f
  400a24:	00400223 	.word	0x00400223
  400a28:	00400241 	.word	0x00400241
  400a2c:	004002a5 	.word	0x004002a5
  400a30:	08f0d180 	.word	0x08f0d180
  400a34:	001e8480 	.word	0x001e8480
  400a38:	004002b9 	.word	0x004002b9
  400a3c:	004002cf 	.word	0x004002cf
  400a40:	004001ad 	.word	0x004001ad
  400a44:	20400001 	.word	0x20400001
  400a48:	00400831 	.word	0x00400831
  400a4c:	400e1400 	.word	0x400e1400

00400a50 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400a50:	b538      	push	{r3, r4, r5, lr}
  400a52:	4605      	mov	r5, r0
  400a54:	2208      	movs	r2, #8
  400a56:	4b09      	ldr	r3, [pc, #36]	; (400a7c <ssd1306_write_data+0x2c>)
  400a58:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a5a:	4c09      	ldr	r4, [pc, #36]	; (400a80 <ssd1306_write_data+0x30>)
  400a5c:	2101      	movs	r1, #1
  400a5e:	4620      	mov	r0, r4
  400a60:	4b08      	ldr	r3, [pc, #32]	; (400a84 <ssd1306_write_data+0x34>)
  400a62:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400a64:	2301      	movs	r3, #1
  400a66:	461a      	mov	r2, r3
  400a68:	4629      	mov	r1, r5
  400a6a:	4620      	mov	r0, r4
  400a6c:	4c06      	ldr	r4, [pc, #24]	; (400a88 <ssd1306_write_data+0x38>)
  400a6e:	47a0      	blx	r4
	delay_us(10);
  400a70:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a74:	4b05      	ldr	r3, [pc, #20]	; (400a8c <ssd1306_write_data+0x3c>)
  400a76:	4798      	blx	r3
  400a78:	bd38      	pop	{r3, r4, r5, pc}
  400a7a:	bf00      	nop
  400a7c:	400e1000 	.word	0x400e1000
  400a80:	40008000 	.word	0x40008000
  400a84:	004001d9 	.word	0x004001d9
  400a88:	004001ef 	.word	0x004001ef
  400a8c:	20400001 	.word	0x20400001

00400a90 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a90:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400a92:	4810      	ldr	r0, [pc, #64]	; (400ad4 <sysclk_init+0x44>)
  400a94:	4b10      	ldr	r3, [pc, #64]	; (400ad8 <sysclk_init+0x48>)
  400a96:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400a98:	213e      	movs	r1, #62	; 0x3e
  400a9a:	2000      	movs	r0, #0
  400a9c:	4b0f      	ldr	r3, [pc, #60]	; (400adc <sysclk_init+0x4c>)
  400a9e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400aa0:	4c0f      	ldr	r4, [pc, #60]	; (400ae0 <sysclk_init+0x50>)
  400aa2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400aa4:	2800      	cmp	r0, #0
  400aa6:	d0fc      	beq.n	400aa2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400aa8:	4b0e      	ldr	r3, [pc, #56]	; (400ae4 <sysclk_init+0x54>)
  400aaa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400aac:	4a0e      	ldr	r2, [pc, #56]	; (400ae8 <sysclk_init+0x58>)
  400aae:	4b0f      	ldr	r3, [pc, #60]	; (400aec <sysclk_init+0x5c>)
  400ab0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400ab2:	4c0f      	ldr	r4, [pc, #60]	; (400af0 <sysclk_init+0x60>)
  400ab4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400ab6:	2800      	cmp	r0, #0
  400ab8:	d0fc      	beq.n	400ab4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400aba:	2002      	movs	r0, #2
  400abc:	4b0d      	ldr	r3, [pc, #52]	; (400af4 <sysclk_init+0x64>)
  400abe:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400ac0:	2000      	movs	r0, #0
  400ac2:	4b0d      	ldr	r3, [pc, #52]	; (400af8 <sysclk_init+0x68>)
  400ac4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ac6:	4b0d      	ldr	r3, [pc, #52]	; (400afc <sysclk_init+0x6c>)
  400ac8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400aca:	4802      	ldr	r0, [pc, #8]	; (400ad4 <sysclk_init+0x44>)
  400acc:	4b02      	ldr	r3, [pc, #8]	; (400ad8 <sysclk_init+0x48>)
  400ace:	4798      	blx	r3
  400ad0:	bd10      	pop	{r4, pc}
  400ad2:	bf00      	nop
  400ad4:	11e1a300 	.word	0x11e1a300
  400ad8:	004011c9 	.word	0x004011c9
  400adc:	00400f19 	.word	0x00400f19
  400ae0:	00400f6d 	.word	0x00400f6d
  400ae4:	00400f7d 	.word	0x00400f7d
  400ae8:	20183f01 	.word	0x20183f01
  400aec:	400e0600 	.word	0x400e0600
  400af0:	00400f8d 	.word	0x00400f8d
  400af4:	00400e7d 	.word	0x00400e7d
  400af8:	00400eb5 	.word	0x00400eb5
  400afc:	004010bd 	.word	0x004010bd

00400b00 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b06:	4b48      	ldr	r3, [pc, #288]	; (400c28 <board_init+0x128>)
  400b08:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400b0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b0e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400b12:	4b46      	ldr	r3, [pc, #280]	; (400c2c <board_init+0x12c>)
  400b14:	2200      	movs	r2, #0
  400b16:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400b1a:	695a      	ldr	r2, [r3, #20]
  400b1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400b20:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400b22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b26:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400b2a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400b2e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400b32:	f007 0007 	and.w	r0, r7, #7
  400b36:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400b38:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400b3c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400b40:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400b44:	f3bf 8f4f 	dsb	sy
  400b48:	f04f 34ff 	mov.w	r4, #4294967295
  400b4c:	fa04 fc00 	lsl.w	ip, r4, r0
  400b50:	fa06 f000 	lsl.w	r0, r6, r0
  400b54:	fa04 f40e 	lsl.w	r4, r4, lr
  400b58:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400b5c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400b5e:	463a      	mov	r2, r7
  400b60:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400b62:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400b66:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400b6a:	3a01      	subs	r2, #1
  400b6c:	4423      	add	r3, r4
  400b6e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400b72:	d1f6      	bne.n	400b62 <board_init+0x62>
        } while(sets--);
  400b74:	3e01      	subs	r6, #1
  400b76:	4460      	add	r0, ip
  400b78:	f1b6 3fff 	cmp.w	r6, #4294967295
  400b7c:	d1ef      	bne.n	400b5e <board_init+0x5e>
  400b7e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400b82:	4b2a      	ldr	r3, [pc, #168]	; (400c2c <board_init+0x12c>)
  400b84:	695a      	ldr	r2, [r3, #20]
  400b86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400b8a:	615a      	str	r2, [r3, #20]
  400b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b90:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b94:	4a26      	ldr	r2, [pc, #152]	; (400c30 <board_init+0x130>)
  400b96:	4927      	ldr	r1, [pc, #156]	; (400c34 <board_init+0x134>)
  400b98:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400b9a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400b9e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400ba0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ba4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400ba8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400bac:	f022 0201 	bic.w	r2, r2, #1
  400bb0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400bb4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400bb8:	f022 0201 	bic.w	r2, r2, #1
  400bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bc4:	f3bf 8f6f 	isb	sy
  400bc8:	200a      	movs	r0, #10
  400bca:	4c1b      	ldr	r4, [pc, #108]	; (400c38 <board_init+0x138>)
  400bcc:	47a0      	blx	r4
  400bce:	200b      	movs	r0, #11
  400bd0:	47a0      	blx	r4
  400bd2:	200c      	movs	r0, #12
  400bd4:	47a0      	blx	r4
  400bd6:	2010      	movs	r0, #16
  400bd8:	47a0      	blx	r4
  400bda:	2011      	movs	r0, #17
  400bdc:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bde:	4b17      	ldr	r3, [pc, #92]	; (400c3c <board_init+0x13c>)
  400be0:	f44f 7280 	mov.w	r2, #256	; 0x100
  400be4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400be6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bea:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400bec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400bf4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400bfa:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c00:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400c02:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400c08:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400c0a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400c0e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400c10:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400c12:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400c16:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400c18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400c1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400c20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c26:	bf00      	nop
  400c28:	400e1850 	.word	0x400e1850
  400c2c:	e000ed00 	.word	0xe000ed00
  400c30:	400e0c00 	.word	0x400e0c00
  400c34:	5a00080c 	.word	0x5a00080c
  400c38:	00400f9d 	.word	0x00400f9d
  400c3c:	400e1200 	.word	0x400e1200

00400c40 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c40:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c42:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c46:	d03a      	beq.n	400cbe <pio_set_peripheral+0x7e>
  400c48:	d813      	bhi.n	400c72 <pio_set_peripheral+0x32>
  400c4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c4e:	d025      	beq.n	400c9c <pio_set_peripheral+0x5c>
  400c50:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c54:	d10a      	bne.n	400c6c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c56:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c58:	4313      	orrs	r3, r2
  400c5a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c5e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c60:	400b      	ands	r3, r1
  400c62:	ea23 0302 	bic.w	r3, r3, r2
  400c66:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c68:	6042      	str	r2, [r0, #4]
  400c6a:	4770      	bx	lr
	switch (ul_type) {
  400c6c:	2900      	cmp	r1, #0
  400c6e:	d1fb      	bne.n	400c68 <pio_set_peripheral+0x28>
  400c70:	4770      	bx	lr
  400c72:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c76:	d021      	beq.n	400cbc <pio_set_peripheral+0x7c>
  400c78:	d809      	bhi.n	400c8e <pio_set_peripheral+0x4e>
  400c7a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c7e:	d1f3      	bne.n	400c68 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c80:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c82:	4313      	orrs	r3, r2
  400c84:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c86:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c88:	4313      	orrs	r3, r2
  400c8a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c8c:	e7ec      	b.n	400c68 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c8e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c92:	d013      	beq.n	400cbc <pio_set_peripheral+0x7c>
  400c94:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c98:	d010      	beq.n	400cbc <pio_set_peripheral+0x7c>
  400c9a:	e7e5      	b.n	400c68 <pio_set_peripheral+0x28>
{
  400c9c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c9e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ca0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ca2:	43d3      	mvns	r3, r2
  400ca4:	4021      	ands	r1, r4
  400ca6:	461c      	mov	r4, r3
  400ca8:	4019      	ands	r1, r3
  400caa:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cac:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cae:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400cb0:	400b      	ands	r3, r1
  400cb2:	4023      	ands	r3, r4
  400cb4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400cb6:	6042      	str	r2, [r0, #4]
}
  400cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cbc:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cbe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cc0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400cc2:	400b      	ands	r3, r1
  400cc4:	ea23 0302 	bic.w	r3, r3, r2
  400cc8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ccc:	4313      	orrs	r3, r2
  400cce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cd0:	e7ca      	b.n	400c68 <pio_set_peripheral+0x28>

00400cd2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400cd2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cd4:	f012 0f01 	tst.w	r2, #1
  400cd8:	d10d      	bne.n	400cf6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400cda:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400cdc:	f012 0f0a 	tst.w	r2, #10
  400ce0:	d00b      	beq.n	400cfa <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400ce2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400ce4:	f012 0f02 	tst.w	r2, #2
  400ce8:	d109      	bne.n	400cfe <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400cea:	f012 0f08 	tst.w	r2, #8
  400cee:	d008      	beq.n	400d02 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400cf0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400cf4:	e005      	b.n	400d02 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cf6:	6641      	str	r1, [r0, #100]	; 0x64
  400cf8:	e7f0      	b.n	400cdc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cfa:	6241      	str	r1, [r0, #36]	; 0x24
  400cfc:	e7f2      	b.n	400ce4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cfe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400d02:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400d04:	6001      	str	r1, [r0, #0]
  400d06:	4770      	bx	lr

00400d08 <pio_set_output>:
{
  400d08:	b410      	push	{r4}
  400d0a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400d0c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d0e:	b94c      	cbnz	r4, 400d24 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400d10:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400d12:	b14b      	cbz	r3, 400d28 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400d14:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400d16:	b94a      	cbnz	r2, 400d2c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400d18:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400d1a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d1c:	6001      	str	r1, [r0, #0]
}
  400d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d22:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400d24:	6641      	str	r1, [r0, #100]	; 0x64
  400d26:	e7f4      	b.n	400d12 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400d28:	6541      	str	r1, [r0, #84]	; 0x54
  400d2a:	e7f4      	b.n	400d16 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400d2c:	6301      	str	r1, [r0, #48]	; 0x30
  400d2e:	e7f4      	b.n	400d1a <pio_set_output+0x12>

00400d30 <pio_configure>:
{
  400d30:	b570      	push	{r4, r5, r6, lr}
  400d32:	b082      	sub	sp, #8
  400d34:	4605      	mov	r5, r0
  400d36:	4616      	mov	r6, r2
  400d38:	461c      	mov	r4, r3
	switch (ul_type) {
  400d3a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d3e:	d014      	beq.n	400d6a <pio_configure+0x3a>
  400d40:	d90a      	bls.n	400d58 <pio_configure+0x28>
  400d42:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d46:	d024      	beq.n	400d92 <pio_configure+0x62>
  400d48:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d4c:	d021      	beq.n	400d92 <pio_configure+0x62>
  400d4e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d52:	d017      	beq.n	400d84 <pio_configure+0x54>
		return 0;
  400d54:	2000      	movs	r0, #0
  400d56:	e01a      	b.n	400d8e <pio_configure+0x5e>
	switch (ul_type) {
  400d58:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d5c:	d005      	beq.n	400d6a <pio_configure+0x3a>
  400d5e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d62:	d002      	beq.n	400d6a <pio_configure+0x3a>
  400d64:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d68:	d1f4      	bne.n	400d54 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d6a:	4632      	mov	r2, r6
  400d6c:	4628      	mov	r0, r5
  400d6e:	4b11      	ldr	r3, [pc, #68]	; (400db4 <pio_configure+0x84>)
  400d70:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d72:	f014 0f01 	tst.w	r4, #1
  400d76:	d102      	bne.n	400d7e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d78:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d7a:	2001      	movs	r0, #1
  400d7c:	e007      	b.n	400d8e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d7e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d80:	2001      	movs	r0, #1
  400d82:	e004      	b.n	400d8e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d84:	461a      	mov	r2, r3
  400d86:	4631      	mov	r1, r6
  400d88:	4b0b      	ldr	r3, [pc, #44]	; (400db8 <pio_configure+0x88>)
  400d8a:	4798      	blx	r3
	return 1;
  400d8c:	2001      	movs	r0, #1
}
  400d8e:	b002      	add	sp, #8
  400d90:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d92:	f004 0301 	and.w	r3, r4, #1
  400d96:	9300      	str	r3, [sp, #0]
  400d98:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d9c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400da0:	bf14      	ite	ne
  400da2:	2200      	movne	r2, #0
  400da4:	2201      	moveq	r2, #1
  400da6:	4631      	mov	r1, r6
  400da8:	4628      	mov	r0, r5
  400daa:	4c04      	ldr	r4, [pc, #16]	; (400dbc <pio_configure+0x8c>)
  400dac:	47a0      	blx	r4
	return 1;
  400dae:	2001      	movs	r0, #1
		break;
  400db0:	e7ed      	b.n	400d8e <pio_configure+0x5e>
  400db2:	bf00      	nop
  400db4:	00400c41 	.word	0x00400c41
  400db8:	00400cd3 	.word	0x00400cd3
  400dbc:	00400d09 	.word	0x00400d09

00400dc0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dc2:	4770      	bx	lr

00400dc4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dc4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dc6:	4770      	bx	lr

00400dc8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dcc:	4604      	mov	r4, r0
  400dce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dd0:	4b0e      	ldr	r3, [pc, #56]	; (400e0c <pio_handler_process+0x44>)
  400dd2:	4798      	blx	r3
  400dd4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dd6:	4620      	mov	r0, r4
  400dd8:	4b0d      	ldr	r3, [pc, #52]	; (400e10 <pio_handler_process+0x48>)
  400dda:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ddc:	4005      	ands	r5, r0
  400dde:	d013      	beq.n	400e08 <pio_handler_process+0x40>
  400de0:	4c0c      	ldr	r4, [pc, #48]	; (400e14 <pio_handler_process+0x4c>)
  400de2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400de6:	e003      	b.n	400df0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400de8:	42b4      	cmp	r4, r6
  400dea:	d00d      	beq.n	400e08 <pio_handler_process+0x40>
  400dec:	3410      	adds	r4, #16
		while (status != 0) {
  400dee:	b15d      	cbz	r5, 400e08 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400df0:	6820      	ldr	r0, [r4, #0]
  400df2:	4540      	cmp	r0, r8
  400df4:	d1f8      	bne.n	400de8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400df6:	6861      	ldr	r1, [r4, #4]
  400df8:	4229      	tst	r1, r5
  400dfa:	d0f5      	beq.n	400de8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400dfc:	68e3      	ldr	r3, [r4, #12]
  400dfe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e00:	6863      	ldr	r3, [r4, #4]
  400e02:	ea25 0503 	bic.w	r5, r5, r3
  400e06:	e7ef      	b.n	400de8 <pio_handler_process+0x20>
  400e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e0c:	00400dc1 	.word	0x00400dc1
  400e10:	00400dc5 	.word	0x00400dc5
  400e14:	2040066c 	.word	0x2040066c

00400e18 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e18:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e1a:	210a      	movs	r1, #10
  400e1c:	4801      	ldr	r0, [pc, #4]	; (400e24 <PIOA_Handler+0xc>)
  400e1e:	4b02      	ldr	r3, [pc, #8]	; (400e28 <PIOA_Handler+0x10>)
  400e20:	4798      	blx	r3
  400e22:	bd08      	pop	{r3, pc}
  400e24:	400e0e00 	.word	0x400e0e00
  400e28:	00400dc9 	.word	0x00400dc9

00400e2c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e2c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e2e:	210b      	movs	r1, #11
  400e30:	4801      	ldr	r0, [pc, #4]	; (400e38 <PIOB_Handler+0xc>)
  400e32:	4b02      	ldr	r3, [pc, #8]	; (400e3c <PIOB_Handler+0x10>)
  400e34:	4798      	blx	r3
  400e36:	bd08      	pop	{r3, pc}
  400e38:	400e1000 	.word	0x400e1000
  400e3c:	00400dc9 	.word	0x00400dc9

00400e40 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e40:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e42:	210c      	movs	r1, #12
  400e44:	4801      	ldr	r0, [pc, #4]	; (400e4c <PIOC_Handler+0xc>)
  400e46:	4b02      	ldr	r3, [pc, #8]	; (400e50 <PIOC_Handler+0x10>)
  400e48:	4798      	blx	r3
  400e4a:	bd08      	pop	{r3, pc}
  400e4c:	400e1200 	.word	0x400e1200
  400e50:	00400dc9 	.word	0x00400dc9

00400e54 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400e54:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400e56:	2110      	movs	r1, #16
  400e58:	4801      	ldr	r0, [pc, #4]	; (400e60 <PIOD_Handler+0xc>)
  400e5a:	4b02      	ldr	r3, [pc, #8]	; (400e64 <PIOD_Handler+0x10>)
  400e5c:	4798      	blx	r3
  400e5e:	bd08      	pop	{r3, pc}
  400e60:	400e1400 	.word	0x400e1400
  400e64:	00400dc9 	.word	0x00400dc9

00400e68 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400e68:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400e6a:	2111      	movs	r1, #17
  400e6c:	4801      	ldr	r0, [pc, #4]	; (400e74 <PIOE_Handler+0xc>)
  400e6e:	4b02      	ldr	r3, [pc, #8]	; (400e78 <PIOE_Handler+0x10>)
  400e70:	4798      	blx	r3
  400e72:	bd08      	pop	{r3, pc}
  400e74:	400e1600 	.word	0x400e1600
  400e78:	00400dc9 	.word	0x00400dc9

00400e7c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400e7c:	2803      	cmp	r0, #3
  400e7e:	d011      	beq.n	400ea4 <pmc_mck_set_division+0x28>
  400e80:	2804      	cmp	r0, #4
  400e82:	d012      	beq.n	400eaa <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e84:	2802      	cmp	r0, #2
  400e86:	bf0c      	ite	eq
  400e88:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400e8c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400e8e:	4a08      	ldr	r2, [pc, #32]	; (400eb0 <pmc_mck_set_division+0x34>)
  400e90:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400e96:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400e98:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e9a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e9c:	f013 0f08 	tst.w	r3, #8
  400ea0:	d0fb      	beq.n	400e9a <pmc_mck_set_division+0x1e>
}
  400ea2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400ea4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400ea8:	e7f1      	b.n	400e8e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400eae:	e7ee      	b.n	400e8e <pmc_mck_set_division+0x12>
  400eb0:	400e0600 	.word	0x400e0600

00400eb4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400eb4:	4a17      	ldr	r2, [pc, #92]	; (400f14 <pmc_switch_mck_to_pllack+0x60>)
  400eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ebc:	4318      	orrs	r0, r3
  400ebe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ec0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ec2:	f013 0f08 	tst.w	r3, #8
  400ec6:	d10a      	bne.n	400ede <pmc_switch_mck_to_pllack+0x2a>
  400ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ecc:	4911      	ldr	r1, [pc, #68]	; (400f14 <pmc_switch_mck_to_pllack+0x60>)
  400ece:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ed0:	f012 0f08 	tst.w	r2, #8
  400ed4:	d103      	bne.n	400ede <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ed6:	3b01      	subs	r3, #1
  400ed8:	d1f9      	bne.n	400ece <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400eda:	2001      	movs	r0, #1
  400edc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ede:	4a0d      	ldr	r2, [pc, #52]	; (400f14 <pmc_switch_mck_to_pllack+0x60>)
  400ee0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ee2:	f023 0303 	bic.w	r3, r3, #3
  400ee6:	f043 0302 	orr.w	r3, r3, #2
  400eea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400eec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400eee:	f013 0f08 	tst.w	r3, #8
  400ef2:	d10a      	bne.n	400f0a <pmc_switch_mck_to_pllack+0x56>
  400ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ef8:	4906      	ldr	r1, [pc, #24]	; (400f14 <pmc_switch_mck_to_pllack+0x60>)
  400efa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400efc:	f012 0f08 	tst.w	r2, #8
  400f00:	d105      	bne.n	400f0e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f02:	3b01      	subs	r3, #1
  400f04:	d1f9      	bne.n	400efa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f06:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f08:	4770      	bx	lr
	return 0;
  400f0a:	2000      	movs	r0, #0
  400f0c:	4770      	bx	lr
  400f0e:	2000      	movs	r0, #0
  400f10:	4770      	bx	lr
  400f12:	bf00      	nop
  400f14:	400e0600 	.word	0x400e0600

00400f18 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f18:	b9a0      	cbnz	r0, 400f44 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f1a:	480e      	ldr	r0, [pc, #56]	; (400f54 <pmc_switch_mainck_to_xtal+0x3c>)
  400f1c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f1e:	0209      	lsls	r1, r1, #8
  400f20:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f22:	4a0d      	ldr	r2, [pc, #52]	; (400f58 <pmc_switch_mainck_to_xtal+0x40>)
  400f24:	401a      	ands	r2, r3
  400f26:	4b0d      	ldr	r3, [pc, #52]	; (400f5c <pmc_switch_mainck_to_xtal+0x44>)
  400f28:	4313      	orrs	r3, r2
  400f2a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f2c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f2e:	4602      	mov	r2, r0
  400f30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f32:	f013 0f01 	tst.w	r3, #1
  400f36:	d0fb      	beq.n	400f30 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f38:	4a06      	ldr	r2, [pc, #24]	; (400f54 <pmc_switch_mainck_to_xtal+0x3c>)
  400f3a:	6a11      	ldr	r1, [r2, #32]
  400f3c:	4b08      	ldr	r3, [pc, #32]	; (400f60 <pmc_switch_mainck_to_xtal+0x48>)
  400f3e:	430b      	orrs	r3, r1
  400f40:	6213      	str	r3, [r2, #32]
  400f42:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f44:	4903      	ldr	r1, [pc, #12]	; (400f54 <pmc_switch_mainck_to_xtal+0x3c>)
  400f46:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f48:	4a06      	ldr	r2, [pc, #24]	; (400f64 <pmc_switch_mainck_to_xtal+0x4c>)
  400f4a:	401a      	ands	r2, r3
  400f4c:	4b06      	ldr	r3, [pc, #24]	; (400f68 <pmc_switch_mainck_to_xtal+0x50>)
  400f4e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f50:	620b      	str	r3, [r1, #32]
  400f52:	4770      	bx	lr
  400f54:	400e0600 	.word	0x400e0600
  400f58:	ffc8fffc 	.word	0xffc8fffc
  400f5c:	00370001 	.word	0x00370001
  400f60:	01370000 	.word	0x01370000
  400f64:	fec8fffc 	.word	0xfec8fffc
  400f68:	01370002 	.word	0x01370002

00400f6c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400f6c:	4b02      	ldr	r3, [pc, #8]	; (400f78 <pmc_osc_is_ready_mainck+0xc>)
  400f6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f70:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400f74:	4770      	bx	lr
  400f76:	bf00      	nop
  400f78:	400e0600 	.word	0x400e0600

00400f7c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400f7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400f80:	4b01      	ldr	r3, [pc, #4]	; (400f88 <pmc_disable_pllack+0xc>)
  400f82:	629a      	str	r2, [r3, #40]	; 0x28
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	400e0600 	.word	0x400e0600

00400f8c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400f8c:	4b02      	ldr	r3, [pc, #8]	; (400f98 <pmc_is_locked_pllack+0xc>)
  400f8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f90:	f000 0002 	and.w	r0, r0, #2
  400f94:	4770      	bx	lr
  400f96:	bf00      	nop
  400f98:	400e0600 	.word	0x400e0600

00400f9c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400f9c:	283f      	cmp	r0, #63	; 0x3f
  400f9e:	d81e      	bhi.n	400fde <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400fa0:	281f      	cmp	r0, #31
  400fa2:	d80c      	bhi.n	400fbe <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400fa4:	4b11      	ldr	r3, [pc, #68]	; (400fec <pmc_enable_periph_clk+0x50>)
  400fa6:	699a      	ldr	r2, [r3, #24]
  400fa8:	2301      	movs	r3, #1
  400faa:	4083      	lsls	r3, r0
  400fac:	4393      	bics	r3, r2
  400fae:	d018      	beq.n	400fe2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400fb0:	2301      	movs	r3, #1
  400fb2:	fa03 f000 	lsl.w	r0, r3, r0
  400fb6:	4b0d      	ldr	r3, [pc, #52]	; (400fec <pmc_enable_periph_clk+0x50>)
  400fb8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400fba:	2000      	movs	r0, #0
  400fbc:	4770      	bx	lr
		ul_id -= 32;
  400fbe:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400fc0:	4b0a      	ldr	r3, [pc, #40]	; (400fec <pmc_enable_periph_clk+0x50>)
  400fc2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400fc6:	2301      	movs	r3, #1
  400fc8:	4083      	lsls	r3, r0
  400fca:	4393      	bics	r3, r2
  400fcc:	d00b      	beq.n	400fe6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400fce:	2301      	movs	r3, #1
  400fd0:	fa03 f000 	lsl.w	r0, r3, r0
  400fd4:	4b05      	ldr	r3, [pc, #20]	; (400fec <pmc_enable_periph_clk+0x50>)
  400fd6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400fda:	2000      	movs	r0, #0
  400fdc:	4770      	bx	lr
		return 1;
  400fde:	2001      	movs	r0, #1
  400fe0:	4770      	bx	lr
	return 0;
  400fe2:	2000      	movs	r0, #0
  400fe4:	4770      	bx	lr
  400fe6:	2000      	movs	r0, #0
}
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	400e0600 	.word	0x400e0600

00400ff0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ff0:	e7fe      	b.n	400ff0 <Dummy_Handler>
	...

00400ff4 <Reset_Handler>:
{
  400ff4:	b500      	push	{lr}
  400ff6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400ff8:	4b25      	ldr	r3, [pc, #148]	; (401090 <Reset_Handler+0x9c>)
  400ffa:	4a26      	ldr	r2, [pc, #152]	; (401094 <Reset_Handler+0xa0>)
  400ffc:	429a      	cmp	r2, r3
  400ffe:	d010      	beq.n	401022 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401000:	4b25      	ldr	r3, [pc, #148]	; (401098 <Reset_Handler+0xa4>)
  401002:	4a23      	ldr	r2, [pc, #140]	; (401090 <Reset_Handler+0x9c>)
  401004:	429a      	cmp	r2, r3
  401006:	d20c      	bcs.n	401022 <Reset_Handler+0x2e>
  401008:	3b01      	subs	r3, #1
  40100a:	1a9b      	subs	r3, r3, r2
  40100c:	f023 0303 	bic.w	r3, r3, #3
  401010:	3304      	adds	r3, #4
  401012:	4413      	add	r3, r2
  401014:	491f      	ldr	r1, [pc, #124]	; (401094 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401016:	f851 0b04 	ldr.w	r0, [r1], #4
  40101a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40101e:	429a      	cmp	r2, r3
  401020:	d1f9      	bne.n	401016 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401022:	4b1e      	ldr	r3, [pc, #120]	; (40109c <Reset_Handler+0xa8>)
  401024:	4a1e      	ldr	r2, [pc, #120]	; (4010a0 <Reset_Handler+0xac>)
  401026:	429a      	cmp	r2, r3
  401028:	d20a      	bcs.n	401040 <Reset_Handler+0x4c>
  40102a:	3b01      	subs	r3, #1
  40102c:	1a9b      	subs	r3, r3, r2
  40102e:	f023 0303 	bic.w	r3, r3, #3
  401032:	3304      	adds	r3, #4
  401034:	4413      	add	r3, r2
                *pDest++ = 0;
  401036:	2100      	movs	r1, #0
  401038:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40103c:	4293      	cmp	r3, r2
  40103e:	d1fb      	bne.n	401038 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401040:	4a18      	ldr	r2, [pc, #96]	; (4010a4 <Reset_Handler+0xb0>)
  401042:	4b19      	ldr	r3, [pc, #100]	; (4010a8 <Reset_Handler+0xb4>)
  401044:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401048:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40104a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40104e:	fab3 f383 	clz	r3, r3
  401052:	095b      	lsrs	r3, r3, #5
  401054:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401056:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401058:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40105c:	2200      	movs	r2, #0
  40105e:	4b13      	ldr	r3, [pc, #76]	; (4010ac <Reset_Handler+0xb8>)
  401060:	701a      	strb	r2, [r3, #0]
	return flags;
  401062:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401064:	4a12      	ldr	r2, [pc, #72]	; (4010b0 <Reset_Handler+0xbc>)
  401066:	6813      	ldr	r3, [r2, #0]
  401068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40106c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40106e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401072:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401076:	b129      	cbz	r1, 401084 <Reset_Handler+0x90>
		cpu_irq_enable();
  401078:	2201      	movs	r2, #1
  40107a:	4b0c      	ldr	r3, [pc, #48]	; (4010ac <Reset_Handler+0xb8>)
  40107c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40107e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401082:	b662      	cpsie	i
        __libc_init_array();
  401084:	4b0b      	ldr	r3, [pc, #44]	; (4010b4 <Reset_Handler+0xc0>)
  401086:	4798      	blx	r3
        main();
  401088:	4b0b      	ldr	r3, [pc, #44]	; (4010b8 <Reset_Handler+0xc4>)
  40108a:	4798      	blx	r3
  40108c:	e7fe      	b.n	40108c <Reset_Handler+0x98>
  40108e:	bf00      	nop
  401090:	20400000 	.word	0x20400000
  401094:	00401e88 	.word	0x00401e88
  401098:	2040044c 	.word	0x2040044c
  40109c:	20400700 	.word	0x20400700
  4010a0:	2040044c 	.word	0x2040044c
  4010a4:	e000ed00 	.word	0xe000ed00
  4010a8:	00400000 	.word	0x00400000
  4010ac:	20400018 	.word	0x20400018
  4010b0:	e000ed88 	.word	0xe000ed88
  4010b4:	004012a1 	.word	0x004012a1
  4010b8:	00401255 	.word	0x00401255

004010bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4010bc:	4b3b      	ldr	r3, [pc, #236]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  4010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010c0:	f003 0303 	and.w	r3, r3, #3
  4010c4:	2b01      	cmp	r3, #1
  4010c6:	d01d      	beq.n	401104 <SystemCoreClockUpdate+0x48>
  4010c8:	b183      	cbz	r3, 4010ec <SystemCoreClockUpdate+0x30>
  4010ca:	2b02      	cmp	r3, #2
  4010cc:	d036      	beq.n	40113c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4010ce:	4b37      	ldr	r3, [pc, #220]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  4010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010d6:	2b70      	cmp	r3, #112	; 0x70
  4010d8:	d05f      	beq.n	40119a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010da:	4b34      	ldr	r3, [pc, #208]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  4010dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010de:	4934      	ldr	r1, [pc, #208]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  4010e0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4010e4:	680b      	ldr	r3, [r1, #0]
  4010e6:	40d3      	lsrs	r3, r2
  4010e8:	600b      	str	r3, [r1, #0]
  4010ea:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4010ec:	4b31      	ldr	r3, [pc, #196]	; (4011b4 <SystemCoreClockUpdate+0xf8>)
  4010ee:	695b      	ldr	r3, [r3, #20]
  4010f0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4010f4:	bf14      	ite	ne
  4010f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4010fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010fe:	4b2c      	ldr	r3, [pc, #176]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401100:	601a      	str	r2, [r3, #0]
  401102:	e7e4      	b.n	4010ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401104:	4b29      	ldr	r3, [pc, #164]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  401106:	6a1b      	ldr	r3, [r3, #32]
  401108:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40110c:	d003      	beq.n	401116 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40110e:	4a2a      	ldr	r2, [pc, #168]	; (4011b8 <SystemCoreClockUpdate+0xfc>)
  401110:	4b27      	ldr	r3, [pc, #156]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401112:	601a      	str	r2, [r3, #0]
  401114:	e7db      	b.n	4010ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401116:	4a29      	ldr	r2, [pc, #164]	; (4011bc <SystemCoreClockUpdate+0x100>)
  401118:	4b25      	ldr	r3, [pc, #148]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  40111a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40111c:	4b23      	ldr	r3, [pc, #140]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  40111e:	6a1b      	ldr	r3, [r3, #32]
  401120:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401124:	2b10      	cmp	r3, #16
  401126:	d005      	beq.n	401134 <SystemCoreClockUpdate+0x78>
  401128:	2b20      	cmp	r3, #32
  40112a:	d1d0      	bne.n	4010ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40112c:	4a22      	ldr	r2, [pc, #136]	; (4011b8 <SystemCoreClockUpdate+0xfc>)
  40112e:	4b20      	ldr	r3, [pc, #128]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401130:	601a      	str	r2, [r3, #0]
          break;
  401132:	e7cc      	b.n	4010ce <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401134:	4a22      	ldr	r2, [pc, #136]	; (4011c0 <SystemCoreClockUpdate+0x104>)
  401136:	4b1e      	ldr	r3, [pc, #120]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401138:	601a      	str	r2, [r3, #0]
          break;
  40113a:	e7c8      	b.n	4010ce <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40113c:	4b1b      	ldr	r3, [pc, #108]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  40113e:	6a1b      	ldr	r3, [r3, #32]
  401140:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401144:	d016      	beq.n	401174 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401146:	4a1c      	ldr	r2, [pc, #112]	; (4011b8 <SystemCoreClockUpdate+0xfc>)
  401148:	4b19      	ldr	r3, [pc, #100]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  40114a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40114c:	4b17      	ldr	r3, [pc, #92]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  40114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401150:	f003 0303 	and.w	r3, r3, #3
  401154:	2b02      	cmp	r3, #2
  401156:	d1ba      	bne.n	4010ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401158:	4a14      	ldr	r2, [pc, #80]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  40115a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40115c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40115e:	4814      	ldr	r0, [pc, #80]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401160:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401164:	6803      	ldr	r3, [r0, #0]
  401166:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40116a:	b2d2      	uxtb	r2, r2
  40116c:	fbb3 f3f2 	udiv	r3, r3, r2
  401170:	6003      	str	r3, [r0, #0]
  401172:	e7ac      	b.n	4010ce <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401174:	4a11      	ldr	r2, [pc, #68]	; (4011bc <SystemCoreClockUpdate+0x100>)
  401176:	4b0e      	ldr	r3, [pc, #56]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401178:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40117a:	4b0c      	ldr	r3, [pc, #48]	; (4011ac <SystemCoreClockUpdate+0xf0>)
  40117c:	6a1b      	ldr	r3, [r3, #32]
  40117e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401182:	2b10      	cmp	r3, #16
  401184:	d005      	beq.n	401192 <SystemCoreClockUpdate+0xd6>
  401186:	2b20      	cmp	r3, #32
  401188:	d1e0      	bne.n	40114c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40118a:	4a0b      	ldr	r2, [pc, #44]	; (4011b8 <SystemCoreClockUpdate+0xfc>)
  40118c:	4b08      	ldr	r3, [pc, #32]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  40118e:	601a      	str	r2, [r3, #0]
          break;
  401190:	e7dc      	b.n	40114c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401192:	4a0b      	ldr	r2, [pc, #44]	; (4011c0 <SystemCoreClockUpdate+0x104>)
  401194:	4b06      	ldr	r3, [pc, #24]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  401196:	601a      	str	r2, [r3, #0]
          break;
  401198:	e7d8      	b.n	40114c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40119a:	4a05      	ldr	r2, [pc, #20]	; (4011b0 <SystemCoreClockUpdate+0xf4>)
  40119c:	6813      	ldr	r3, [r2, #0]
  40119e:	4909      	ldr	r1, [pc, #36]	; (4011c4 <SystemCoreClockUpdate+0x108>)
  4011a0:	fba1 1303 	umull	r1, r3, r1, r3
  4011a4:	085b      	lsrs	r3, r3, #1
  4011a6:	6013      	str	r3, [r2, #0]
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	400e0600 	.word	0x400e0600
  4011b0:	2040001c 	.word	0x2040001c
  4011b4:	400e1810 	.word	0x400e1810
  4011b8:	00b71b00 	.word	0x00b71b00
  4011bc:	003d0900 	.word	0x003d0900
  4011c0:	007a1200 	.word	0x007a1200
  4011c4:	aaaaaaab 	.word	0xaaaaaaab

004011c8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4011c8:	4b16      	ldr	r3, [pc, #88]	; (401224 <system_init_flash+0x5c>)
  4011ca:	4298      	cmp	r0, r3
  4011cc:	d913      	bls.n	4011f6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4011ce:	4b16      	ldr	r3, [pc, #88]	; (401228 <system_init_flash+0x60>)
  4011d0:	4298      	cmp	r0, r3
  4011d2:	d915      	bls.n	401200 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4011d4:	4b15      	ldr	r3, [pc, #84]	; (40122c <system_init_flash+0x64>)
  4011d6:	4298      	cmp	r0, r3
  4011d8:	d916      	bls.n	401208 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4011da:	4b15      	ldr	r3, [pc, #84]	; (401230 <system_init_flash+0x68>)
  4011dc:	4298      	cmp	r0, r3
  4011de:	d917      	bls.n	401210 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4011e0:	4b14      	ldr	r3, [pc, #80]	; (401234 <system_init_flash+0x6c>)
  4011e2:	4298      	cmp	r0, r3
  4011e4:	d918      	bls.n	401218 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4011e6:	4b14      	ldr	r3, [pc, #80]	; (401238 <system_init_flash+0x70>)
  4011e8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011ea:	bf94      	ite	ls
  4011ec:	4a13      	ldrls	r2, [pc, #76]	; (40123c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4011ee:	4a14      	ldrhi	r2, [pc, #80]	; (401240 <system_init_flash+0x78>)
  4011f0:	4b14      	ldr	r3, [pc, #80]	; (401244 <system_init_flash+0x7c>)
  4011f2:	601a      	str	r2, [r3, #0]
  4011f4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4011f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4011fa:	4b12      	ldr	r3, [pc, #72]	; (401244 <system_init_flash+0x7c>)
  4011fc:	601a      	str	r2, [r3, #0]
  4011fe:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401200:	4a11      	ldr	r2, [pc, #68]	; (401248 <system_init_flash+0x80>)
  401202:	4b10      	ldr	r3, [pc, #64]	; (401244 <system_init_flash+0x7c>)
  401204:	601a      	str	r2, [r3, #0]
  401206:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401208:	4a10      	ldr	r2, [pc, #64]	; (40124c <system_init_flash+0x84>)
  40120a:	4b0e      	ldr	r3, [pc, #56]	; (401244 <system_init_flash+0x7c>)
  40120c:	601a      	str	r2, [r3, #0]
  40120e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401210:	4a0f      	ldr	r2, [pc, #60]	; (401250 <system_init_flash+0x88>)
  401212:	4b0c      	ldr	r3, [pc, #48]	; (401244 <system_init_flash+0x7c>)
  401214:	601a      	str	r2, [r3, #0]
  401216:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401218:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40121c:	4b09      	ldr	r3, [pc, #36]	; (401244 <system_init_flash+0x7c>)
  40121e:	601a      	str	r2, [r3, #0]
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	015ef3bf 	.word	0x015ef3bf
  401228:	02bde77f 	.word	0x02bde77f
  40122c:	041cdb3f 	.word	0x041cdb3f
  401230:	057bceff 	.word	0x057bceff
  401234:	06dac2bf 	.word	0x06dac2bf
  401238:	0839b67f 	.word	0x0839b67f
  40123c:	04000500 	.word	0x04000500
  401240:	04000600 	.word	0x04000600
  401244:	400e0c00 	.word	0x400e0c00
  401248:	04000100 	.word	0x04000100
  40124c:	04000200 	.word	0x04000200
  401250:	04000300 	.word	0x04000300

00401254 <main>:
#include "gfx_mono_ug_2832hsweg04.h"
#include "gfx_mono_text.h"
#include "sysfont.h"

int main (void)
{
  401254:	b500      	push	{lr}
  401256:	b083      	sub	sp, #12
	board_init();
  401258:	4b0a      	ldr	r3, [pc, #40]	; (401284 <main+0x30>)
  40125a:	4798      	blx	r3
	sysclk_init();
  40125c:	4b0a      	ldr	r3, [pc, #40]	; (401288 <main+0x34>)
  40125e:	4798      	blx	r3
	delay_init();

  // Init OLED
	gfx_mono_ssd1306_init();
  401260:	4b0a      	ldr	r3, [pc, #40]	; (40128c <main+0x38>)
  401262:	4798      	blx	r3
  
  // Escreve na tela um circulo e um texto
	gfx_mono_draw_filled_circle(20, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
  401264:	23ff      	movs	r3, #255	; 0xff
  401266:	9300      	str	r3, [sp, #0]
  401268:	2301      	movs	r3, #1
  40126a:	2210      	movs	r2, #16
  40126c:	4611      	mov	r1, r2
  40126e:	2014      	movs	r0, #20
  401270:	4c07      	ldr	r4, [pc, #28]	; (401290 <main+0x3c>)
  401272:	47a0      	blx	r4
  gfx_mono_draw_string("mundo", 50,16, &sysfont);
  401274:	4b07      	ldr	r3, [pc, #28]	; (401294 <main+0x40>)
  401276:	2210      	movs	r2, #16
  401278:	2132      	movs	r1, #50	; 0x32
  40127a:	4807      	ldr	r0, [pc, #28]	; (401298 <main+0x44>)
  40127c:	4c07      	ldr	r4, [pc, #28]	; (40129c <main+0x48>)
  40127e:	47a0      	blx	r4
  401280:	e7fe      	b.n	401280 <main+0x2c>
  401282:	bf00      	nop
  401284:	00400b01 	.word	0x00400b01
  401288:	00400a91 	.word	0x00400a91
  40128c:	0040072d 	.word	0x0040072d
  401290:	004004cd 	.word	0x004004cd
  401294:	2040000c 	.word	0x2040000c
  401298:	00401e58 	.word	0x00401e58
  40129c:	00400695 	.word	0x00400695

004012a0 <__libc_init_array>:
  4012a0:	b570      	push	{r4, r5, r6, lr}
  4012a2:	4e0f      	ldr	r6, [pc, #60]	; (4012e0 <__libc_init_array+0x40>)
  4012a4:	4d0f      	ldr	r5, [pc, #60]	; (4012e4 <__libc_init_array+0x44>)
  4012a6:	1b76      	subs	r6, r6, r5
  4012a8:	10b6      	asrs	r6, r6, #2
  4012aa:	bf18      	it	ne
  4012ac:	2400      	movne	r4, #0
  4012ae:	d005      	beq.n	4012bc <__libc_init_array+0x1c>
  4012b0:	3401      	adds	r4, #1
  4012b2:	f855 3b04 	ldr.w	r3, [r5], #4
  4012b6:	4798      	blx	r3
  4012b8:	42a6      	cmp	r6, r4
  4012ba:	d1f9      	bne.n	4012b0 <__libc_init_array+0x10>
  4012bc:	4e0a      	ldr	r6, [pc, #40]	; (4012e8 <__libc_init_array+0x48>)
  4012be:	4d0b      	ldr	r5, [pc, #44]	; (4012ec <__libc_init_array+0x4c>)
  4012c0:	1b76      	subs	r6, r6, r5
  4012c2:	f000 fdcf 	bl	401e64 <_init>
  4012c6:	10b6      	asrs	r6, r6, #2
  4012c8:	bf18      	it	ne
  4012ca:	2400      	movne	r4, #0
  4012cc:	d006      	beq.n	4012dc <__libc_init_array+0x3c>
  4012ce:	3401      	adds	r4, #1
  4012d0:	f855 3b04 	ldr.w	r3, [r5], #4
  4012d4:	4798      	blx	r3
  4012d6:	42a6      	cmp	r6, r4
  4012d8:	d1f9      	bne.n	4012ce <__libc_init_array+0x2e>
  4012da:	bd70      	pop	{r4, r5, r6, pc}
  4012dc:	bd70      	pop	{r4, r5, r6, pc}
  4012de:	bf00      	nop
  4012e0:	00401e70 	.word	0x00401e70
  4012e4:	00401e70 	.word	0x00401e70
  4012e8:	00401e78 	.word	0x00401e78
  4012ec:	00401e70 	.word	0x00401e70

004012f0 <register_fini>:
  4012f0:	4b02      	ldr	r3, [pc, #8]	; (4012fc <register_fini+0xc>)
  4012f2:	b113      	cbz	r3, 4012fa <register_fini+0xa>
  4012f4:	4802      	ldr	r0, [pc, #8]	; (401300 <register_fini+0x10>)
  4012f6:	f000 b805 	b.w	401304 <atexit>
  4012fa:	4770      	bx	lr
  4012fc:	00000000 	.word	0x00000000
  401300:	00401311 	.word	0x00401311

00401304 <atexit>:
  401304:	2300      	movs	r3, #0
  401306:	4601      	mov	r1, r0
  401308:	461a      	mov	r2, r3
  40130a:	4618      	mov	r0, r3
  40130c:	f000 b81e 	b.w	40134c <__register_exitproc>

00401310 <__libc_fini_array>:
  401310:	b538      	push	{r3, r4, r5, lr}
  401312:	4c0a      	ldr	r4, [pc, #40]	; (40133c <__libc_fini_array+0x2c>)
  401314:	4d0a      	ldr	r5, [pc, #40]	; (401340 <__libc_fini_array+0x30>)
  401316:	1b64      	subs	r4, r4, r5
  401318:	10a4      	asrs	r4, r4, #2
  40131a:	d00a      	beq.n	401332 <__libc_fini_array+0x22>
  40131c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401320:	3b01      	subs	r3, #1
  401322:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401326:	3c01      	subs	r4, #1
  401328:	f855 3904 	ldr.w	r3, [r5], #-4
  40132c:	4798      	blx	r3
  40132e:	2c00      	cmp	r4, #0
  401330:	d1f9      	bne.n	401326 <__libc_fini_array+0x16>
  401332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401336:	f000 bd9f 	b.w	401e78 <_fini>
  40133a:	bf00      	nop
  40133c:	00401e88 	.word	0x00401e88
  401340:	00401e84 	.word	0x00401e84

00401344 <__retarget_lock_acquire_recursive>:
  401344:	4770      	bx	lr
  401346:	bf00      	nop

00401348 <__retarget_lock_release_recursive>:
  401348:	4770      	bx	lr
  40134a:	bf00      	nop

0040134c <__register_exitproc>:
  40134c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401350:	4d2c      	ldr	r5, [pc, #176]	; (401404 <__register_exitproc+0xb8>)
  401352:	4606      	mov	r6, r0
  401354:	6828      	ldr	r0, [r5, #0]
  401356:	4698      	mov	r8, r3
  401358:	460f      	mov	r7, r1
  40135a:	4691      	mov	r9, r2
  40135c:	f7ff fff2 	bl	401344 <__retarget_lock_acquire_recursive>
  401360:	4b29      	ldr	r3, [pc, #164]	; (401408 <__register_exitproc+0xbc>)
  401362:	681c      	ldr	r4, [r3, #0]
  401364:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401368:	2b00      	cmp	r3, #0
  40136a:	d03e      	beq.n	4013ea <__register_exitproc+0x9e>
  40136c:	685a      	ldr	r2, [r3, #4]
  40136e:	2a1f      	cmp	r2, #31
  401370:	dc1c      	bgt.n	4013ac <__register_exitproc+0x60>
  401372:	f102 0e01 	add.w	lr, r2, #1
  401376:	b176      	cbz	r6, 401396 <__register_exitproc+0x4a>
  401378:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40137c:	2401      	movs	r4, #1
  40137e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401382:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401386:	4094      	lsls	r4, r2
  401388:	4320      	orrs	r0, r4
  40138a:	2e02      	cmp	r6, #2
  40138c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401390:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401394:	d023      	beq.n	4013de <__register_exitproc+0x92>
  401396:	3202      	adds	r2, #2
  401398:	f8c3 e004 	str.w	lr, [r3, #4]
  40139c:	6828      	ldr	r0, [r5, #0]
  40139e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4013a2:	f7ff ffd1 	bl	401348 <__retarget_lock_release_recursive>
  4013a6:	2000      	movs	r0, #0
  4013a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013ac:	4b17      	ldr	r3, [pc, #92]	; (40140c <__register_exitproc+0xc0>)
  4013ae:	b30b      	cbz	r3, 4013f4 <__register_exitproc+0xa8>
  4013b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4013b4:	f3af 8000 	nop.w
  4013b8:	4603      	mov	r3, r0
  4013ba:	b1d8      	cbz	r0, 4013f4 <__register_exitproc+0xa8>
  4013bc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4013c0:	6002      	str	r2, [r0, #0]
  4013c2:	2100      	movs	r1, #0
  4013c4:	6041      	str	r1, [r0, #4]
  4013c6:	460a      	mov	r2, r1
  4013c8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4013cc:	f04f 0e01 	mov.w	lr, #1
  4013d0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4013d4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4013d8:	2e00      	cmp	r6, #0
  4013da:	d0dc      	beq.n	401396 <__register_exitproc+0x4a>
  4013dc:	e7cc      	b.n	401378 <__register_exitproc+0x2c>
  4013de:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4013e2:	430c      	orrs	r4, r1
  4013e4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4013e8:	e7d5      	b.n	401396 <__register_exitproc+0x4a>
  4013ea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4013ee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4013f2:	e7bb      	b.n	40136c <__register_exitproc+0x20>
  4013f4:	6828      	ldr	r0, [r5, #0]
  4013f6:	f7ff ffa7 	bl	401348 <__retarget_lock_release_recursive>
  4013fa:	f04f 30ff 	mov.w	r0, #4294967295
  4013fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401402:	bf00      	nop
  401404:	20400448 	.word	0x20400448
  401408:	00401e60 	.word	0x00401e60
  40140c:	00000000 	.word	0x00000000

00401410 <sysfont_glyphs>:
	...
  401430:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  401440:	00000030 00000000 00000000 006c006c     0...........l.l.
  401450:	006c006c 00000000 00000000 00000000     l.l.............
	...
  401468:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  401478:	00000028 00000000 00000000 003c0010     (.............<.
  401488:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  4014a0:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  4014b0:	00000088 00000000 00000000 00900060     ............`...
  4014c0:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4014d8:	00100010 00000010 00000000 00000000     ................
	...
  4014f4:	00100008 00200020 00200020 00200020     .... . . . . . .
  401504:	00080010 00000000 00000000 00100020     ............ ...
  401514:	00080008 00080008 00080008 00200010     .............. .
  401524:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  40154c:	00100010 00fe0010 00100010 00000010     ................
	...
  401574:	00300010 00000020 00000000 00000000     ..0. ...........
  401584:	00000000 007c0000 00000000 00000000     ......|.........
	...
  4015a8:	00300000 00000030 00000000 00000000     ..0.0...........
  4015b8:	00080000 00100008 00200010 00400020     .......... . .@.
  4015c8:	00000040 00000000 00000000 00780000     @.............x.
  4015d8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  4015f0:	00100000 00500030 00100010 00100010     ....0.P.........
  401600:	0000007c 00000000 00000000 00700000     |.............p.
  401610:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401628:	00700000 00080088 00080030 00880008     ..p.....0.......
  401638:	00000070 00000000 00000000 00080000     p...............
  401648:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401660:	00780000 00800080 000800f0 00080008     ..x.............
  401670:	000000f0 00000000 00000000 00300000     ..............0.
  401680:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401698:	00f80000 00100008 00200010 00400020     .......... . .@.
  4016a8:	00000040 00000000 00000000 00700000     @.............p.
  4016b8:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  4016d0:	00700000 00880088 00780088 00100008     ..p.......x.....
  4016e0:	00000060 00000000 00000000 00000000     `...............
  4016f0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  40170c:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  40171c:	00000040 00000000 00000000 00100008     @...............
  40172c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401748:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401760:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401778:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401788:	00000020 00000000 00000000 00000000      ...............
  401798:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  4017b0:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  4017c0:	00000044 00000000 00000000 00f80000     D...............
  4017d0:	00840084 008400f8 00840084 000000f8     ................
	...
  4017e8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  4017f8:	0000003c 00000000 00000000 00f00000     <...............
  401808:	00840088 00840084 00880084 000000f0     ................
	...
  401820:	00f80000 00800080 008000f0 00800080     ................
  401830:	000000f8 00000000 00000000 00f80000     ................
  401840:	00800080 008000f8 00800080 00000080     ................
	...
  401858:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  401868:	00000038 00000000 00000000 00880000     8...............
  401878:	00880088 008800f8 00880088 00000088     ................
	...
  401890:	00f80000 00200020 00200020 00200020     .... . . . . . .
  4018a0:	000000f8 00000000 00000000 00f80000     ................
  4018b0:	00080008 00080008 00080008 000000f0     ................
	...
  4018c8:	00840000 00900088 00d000a0 00840088     ................
  4018d8:	00000084 00000000 00000000 00800000     ................
  4018e8:	00800080 00800080 00800080 000000fc     ................
	...
  401900:	00840000 00cc00cc 00b400b4 00840084     ................
  401910:	00000084 00000000 00000000 00840000     ................
  401920:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  401938:	00780000 00840084 00840084 00840084     ..x.............
  401948:	00000078 00000000 00000000 00f80000     x...............
  401958:	00840084 00f80084 00800080 00000080     ................
	...
  401970:	00780000 00840084 00840084 00840084     ..x.............
  401980:	00200078 00000018 00000000 00f80000     x. .............
  401990:	00840084 00f80084 00840088 00000084     ................
	...
  4019a8:	007c0000 00800080 00180060 00040004     ..|.....`.......
  4019b8:	000000f8 00000000 00000000 00f80000     ................
  4019c8:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4019e0:	00840000 00840084 00840084 00840084     ................
  4019f0:	00000078 00000000 00000000 00840000     x...............
  401a00:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  401a18:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  401a28:	00000050 00000000 00000000 00880000     P...............
  401a38:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  401a50:	00880000 00880088 00500050 00200020     ........P.P. . .
  401a60:	00000020 00000000 00000000 00fc0000      ...............
  401a70:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  401a88:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  401a98:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  401aa8:	00200020 00100020 00100010 00080008      . . ...........
	...
  401ac0:	00080038 00080008 00080008 00080008     8...............
  401ad0:	00080008 00000038 00000000 00280010     ....8.........(.
  401ae0:	00000044 00000000 00000000 00000000     D...............
	...
  401b08:	00000038 00000000 00000000 00200000     8............. .
  401b18:	00000010 00000000 00000000 00000000     ................
	...
  401b34:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  401b4c:	00800080 00f80080 00840084 00840084     ................
  401b5c:	000000f8 00000000 00000000 00000000     ................
  401b6c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  401b84:	00040004 007c0004 00840084 008c0084     ......|.........
  401b94:	00000074 00000000 00000000 00000000     t...............
  401ba4:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  401bbc:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  401bcc:	000000fc 00000000 00000000 00000000     ................
  401bdc:	007c0000 00840084 00840084 0004007c     ..|.........|...
  401bec:	00000078 00000000 00800080 00b80080     x...............
  401bfc:	008400c4 00840084 00000084 00000000     ................
  401c0c:	00000000 00100000 00700000 00100010     ..........p.....
  401c1c:	00100010 0000007c 00000000 00000000     ....|...........
  401c2c:	00080000 00780000 00080008 00080008     ......x.........
  401c3c:	00080008 00700008 00000000 00800080     ......p.........
  401c4c:	00880080 00a00090 008800d0 00000088     ................
	...
  401c64:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  401c74:	000000f8 00000000 00000000 00000000     ................
  401c84:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  401ca0:	00b80000 008400c4 00840084 00000084     ................
	...
  401cbc:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  401cd8:	00b80000 008400c4 00840084 008000f8     ................
  401ce8:	00000080 00000000 00000000 007c0000     ..............|.
  401cf8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  401d10:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  401d2c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  401d48:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  401d64:	00880000 00880088 00880088 0000007c     ............|...
	...
  401d80:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  401d9c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  401db8:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  401dd4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  401de4:	00000040 00000000 00000000 00f80000     @...............
  401df4:	00100008 00400020 000000f8 00000000     .... .@.........
  401e04:	00000000 00200010 00100020 00200020     ...... . ... . .
  401e14:	00200010 00100020 00000000 00000000     .. . ...........
  401e24:	00100010 00100010 00000000 00100010     ................
  401e34:	00100010 00000000 00000000 00100020     ............ ...
  401e44:	00200010 00100010 00100020 00200010     .. ..... ..... .
  401e54:	00000000 646e756d 0000006f              ....mundo...

00401e60 <_global_impure_ptr>:
  401e60:	20400020                                 .@ 

00401e64 <_init>:
  401e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e66:	bf00      	nop
  401e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401e6a:	bc08      	pop	{r3}
  401e6c:	469e      	mov	lr, r3
  401e6e:	4770      	bx	lr

00401e70 <__init_array_start>:
  401e70:	004012f1 	.word	0x004012f1

00401e74 <__frame_dummy_init_array_entry>:
  401e74:	00400165                                e.@.

00401e78 <_fini>:
  401e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e7a:	bf00      	nop
  401e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401e7e:	bc08      	pop	{r3}
  401e80:	469e      	mov	lr, r3
  401e82:	4770      	bx	lr

00401e84 <__fini_array_start>:
  401e84:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1410 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06dc 2040                                   ..@ 
